name: CI & Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #-------TESTS--------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Node dependencies
        run: npm install
        working-directory: backend

      - name: Run tests
        run: pytest
        working-directory: backend

        # ---------- build & push image ----------
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

    env:
      SENTRY_ENV: development
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment:
      name: production
      url: https://entrecode.site
    steps:
      - name: Pull & restart via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            docker pull ghcr.io/${{ github.repository }}:latest
            cd ~/deploy              # dossier où vit ton docker-compose.yml
            docker compose up -d     # redémarre sans downtime
            docker system prune -f --volumes
